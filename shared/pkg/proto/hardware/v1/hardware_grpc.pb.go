// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: hardware/v1/hardware.proto

package hardware_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HardwareService_GetHardware_FullMethodName   = "/hardware.v1.HardwareService/GetHardware"
	HardwareService_ListHardwares_FullMethodName = "/hardware.v1.HardwareService/ListHardwares"
)

// HardwareServiceClient is the client API for HardwareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareServiceClient interface {
	GetHardware(ctx context.Context, in *GetHardwareRequest, opts ...grpc.CallOption) (*GetHardwareResponse, error)
	ListHardwares(ctx context.Context, in *ListHardwaresRequest, opts ...grpc.CallOption) (*ListHardwaresResponse, error)
}

type hardwareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareServiceClient(cc grpc.ClientConnInterface) HardwareServiceClient {
	return &hardwareServiceClient{cc}
}

func (c *hardwareServiceClient) GetHardware(ctx context.Context, in *GetHardwareRequest, opts ...grpc.CallOption) (*GetHardwareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHardwareResponse)
	err := c.cc.Invoke(ctx, HardwareService_GetHardware_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hardwareServiceClient) ListHardwares(ctx context.Context, in *ListHardwaresRequest, opts ...grpc.CallOption) (*ListHardwaresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHardwaresResponse)
	err := c.cc.Invoke(ctx, HardwareService_ListHardwares_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardwareServiceServer is the server API for HardwareService service.
// All implementations must embed UnimplementedHardwareServiceServer
// for forward compatibility.
type HardwareServiceServer interface {
	GetHardware(context.Context, *GetHardwareRequest) (*GetHardwareResponse, error)
	ListHardwares(context.Context, *ListHardwaresRequest) (*ListHardwaresResponse, error)
	mustEmbedUnimplementedHardwareServiceServer()
}

// UnimplementedHardwareServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHardwareServiceServer struct{}

func (UnimplementedHardwareServiceServer) GetHardware(context.Context, *GetHardwareRequest) (*GetHardwareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHardware not implemented")
}
func (UnimplementedHardwareServiceServer) ListHardwares(context.Context, *ListHardwaresRequest) (*ListHardwaresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHardwares not implemented")
}
func (UnimplementedHardwareServiceServer) mustEmbedUnimplementedHardwareServiceServer() {}
func (UnimplementedHardwareServiceServer) testEmbeddedByValue()                         {}

// UnsafeHardwareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareServiceServer will
// result in compilation errors.
type UnsafeHardwareServiceServer interface {
	mustEmbedUnimplementedHardwareServiceServer()
}

func RegisterHardwareServiceServer(s grpc.ServiceRegistrar, srv HardwareServiceServer) {
	// If the following call pancis, it indicates UnimplementedHardwareServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HardwareService_ServiceDesc, srv)
}

func _HardwareService_GetHardware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHardwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).GetHardware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareService_GetHardware_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).GetHardware(ctx, req.(*GetHardwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HardwareService_ListHardwares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHardwaresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).ListHardwares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareService_ListHardwares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).ListHardwares(ctx, req.(*ListHardwaresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HardwareService_ServiceDesc is the grpc.ServiceDesc for HardwareService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hardware.v1.HardwareService",
	HandlerType: (*HardwareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHardware",
			Handler:    _HardwareService_GetHardware_Handler,
		},
		{
			MethodName: "ListHardwares",
			Handler:    _HardwareService_ListHardwares_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hardware/v1/hardware.proto",
}
