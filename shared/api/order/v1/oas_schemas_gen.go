// Code generated by ogen, DO NOT EDIT.

package order_v1

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

func (s *UnexpectedErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/bad_gateway_error
type BadGatewayError struct {
	// HTTP code error.
	Code int `json:"code"`
	// Message error.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadGatewayError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadGatewayError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadGatewayError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadGatewayError) SetMessage(val string) {
	s.Message = val
}

func (*BadGatewayError) cancelOrderRes() {}
func (*BadGatewayError) createOrderRes() {}
func (*BadGatewayError) getOrderRes()    {}
func (*BadGatewayError) payOrderRes()    {}

// Ref: #/components/schemas/bad_request_error
type BadRequestError struct {
	// HTTP code error.
	Code int `json:"code"`
	// Message error.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequestError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequestError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequestError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequestError) SetMessage(val string) {
	s.Message = val
}

func (*BadRequestError) cancelOrderRes() {}
func (*BadRequestError) createOrderRes() {}
func (*BadRequestError) getOrderRes()    {}
func (*BadRequestError) payOrderRes()    {}

// CancelOrderNoContent is response for CancelOrder operation.
type CancelOrderNoContent struct{}

func (*CancelOrderNoContent) cancelOrderRes() {}

// Ref: #/components/schemas/create_order_request
type CreateOrderRequest struct {
	// UUID users.
	UserUUID uuid.UUID `json:"user_uuid"`
	// List computer hardwares in order.
	HardwareUuids []uuid.UUID `json:"hardware_uuids"`
}

// GetUserUUID returns the value of UserUUID.
func (s *CreateOrderRequest) GetUserUUID() uuid.UUID {
	return s.UserUUID
}

// GetHardwareUuids returns the value of HardwareUuids.
func (s *CreateOrderRequest) GetHardwareUuids() []uuid.UUID {
	return s.HardwareUuids
}

// SetUserUUID sets the value of UserUUID.
func (s *CreateOrderRequest) SetUserUUID(val uuid.UUID) {
	s.UserUUID = val
}

// SetHardwareUuids sets the value of HardwareUuids.
func (s *CreateOrderRequest) SetHardwareUuids(val []uuid.UUID) {
	s.HardwareUuids = val
}

// Ref: #/components/schemas/create_order_response
type CreateOrderResponse struct {
	// UUID created order.
	OrderUUID uuid.UUID `json:"order_uuid"`
	// Total price order.
	TotalPrice float32 `json:"total_price"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *CreateOrderResponse) GetOrderUUID() uuid.UUID {
	return s.OrderUUID
}

// GetTotalPrice returns the value of TotalPrice.
func (s *CreateOrderResponse) GetTotalPrice() float32 {
	return s.TotalPrice
}

// SetOrderUUID sets the value of OrderUUID.
func (s *CreateOrderResponse) SetOrderUUID(val uuid.UUID) {
	s.OrderUUID = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *CreateOrderResponse) SetTotalPrice(val float32) {
	s.TotalPrice = val
}

func (*CreateOrderResponse) createOrderRes() {}

// Ref: #/components/schemas/get_order_response
type GetOrderResponse struct {
	Order Order `json:"order"`
}

// GetOrder returns the value of Order.
func (s *GetOrderResponse) GetOrder() Order {
	return s.Order
}

// SetOrder sets the value of Order.
func (s *GetOrderResponse) SetOrder(val Order) {
	s.Order = val
}

func (*GetOrderResponse) getOrderRes() {}

// Ref: #/components/schemas/internal_server_error
type InternalServerError struct {
	// HTTP code error.
	Code int `json:"code"`
	// Message error.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *InternalServerError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *InternalServerError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *InternalServerError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *InternalServerError) SetMessage(val string) {
	s.Message = val
}

func (*InternalServerError) cancelOrderRes() {}
func (*InternalServerError) createOrderRes() {}
func (*InternalServerError) getOrderRes()    {}
func (*InternalServerError) payOrderRes()    {}

// Ref: #/components/schemas/not_found_error
type NotFoundError struct {
	// HTTP code error.
	Code int `json:"code"`
	// Message error.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFoundError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFoundError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFoundError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFoundError) SetMessage(val string) {
	s.Message = val
}

func (*NotFoundError) cancelOrderRes() {}
func (*NotFoundError) createOrderRes() {}
func (*NotFoundError) getOrderRes()    {}
func (*NotFoundError) payOrderRes()    {}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPayment returns new OptPayment with value set to v.
func NewOptPayment(v Payment) OptPayment {
	return OptPayment{
		Value: v,
		Set:   true,
	}
}

// OptPayment is optional Payment.
type OptPayment struct {
	Value Payment
	Set   bool
}

// IsSet returns true if OptPayment was set.
func (o OptPayment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPayment) Reset() {
	var v Payment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPayment) SetTo(v Payment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPayment) Get() (v Payment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPayment) Or(d Payment) Payment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/order
type Order struct {
	// UUID заказа.
	OrderUUID uuid.UUID `json:"order_uuid"`
	// UUID пользователя.
	UserUUID uuid.UUID `json:"user_uuid"`
	// Список комплектующих.
	HardwareUuids []uuid.UUID `json:"hardware_uuids"`
	// Стоимость заказа.
	TotalPrice float32    `json:"total_price"`
	Payment    OptPayment `json:"payment"`
	Status     Status     `json:"status"`
	// Время последнего обновления.
	UpdatedAt OptDateTime `json:"updated_at"`
	// Время создания.
	CreatedAt time.Time `json:"created_at"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *Order) GetOrderUUID() uuid.UUID {
	return s.OrderUUID
}

// GetUserUUID returns the value of UserUUID.
func (s *Order) GetUserUUID() uuid.UUID {
	return s.UserUUID
}

// GetHardwareUuids returns the value of HardwareUuids.
func (s *Order) GetHardwareUuids() []uuid.UUID {
	return s.HardwareUuids
}

// GetTotalPrice returns the value of TotalPrice.
func (s *Order) GetTotalPrice() float32 {
	return s.TotalPrice
}

// GetPayment returns the value of Payment.
func (s *Order) GetPayment() OptPayment {
	return s.Payment
}

// GetStatus returns the value of Status.
func (s *Order) GetStatus() Status {
	return s.Status
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Order) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Order) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetOrderUUID sets the value of OrderUUID.
func (s *Order) SetOrderUUID(val uuid.UUID) {
	s.OrderUUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *Order) SetUserUUID(val uuid.UUID) {
	s.UserUUID = val
}

// SetHardwareUuids sets the value of HardwareUuids.
func (s *Order) SetHardwareUuids(val []uuid.UUID) {
	s.HardwareUuids = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *Order) SetTotalPrice(val float32) {
	s.TotalPrice = val
}

// SetPayment sets the value of Payment.
func (s *Order) SetPayment(val OptPayment) {
	s.Payment = val
}

// SetStatus sets the value of Status.
func (s *Order) SetStatus(val Status) {
	s.Status = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Order) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Order) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// Ref: #/components/schemas/payment
type Payment struct {
	// UUID транзакции.
	TransactionUUID uuid.UUID     `json:"transaction_uuid"`
	PaymentMethod   PaymentMethod `json:"payment_method"`
	// Время оплаты.
	PaymentAt OptDateTime `json:"payment_at"`
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *Payment) GetTransactionUUID() uuid.UUID {
	return s.TransactionUUID
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *Payment) GetPaymentMethod() PaymentMethod {
	return s.PaymentMethod
}

// GetPaymentAt returns the value of PaymentAt.
func (s *Payment) GetPaymentAt() OptDateTime {
	return s.PaymentAt
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *Payment) SetTransactionUUID(val uuid.UUID) {
	s.TransactionUUID = val
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *Payment) SetPaymentMethod(val PaymentMethod) {
	s.PaymentMethod = val
}

// SetPaymentAt sets the value of PaymentAt.
func (s *Payment) SetPaymentAt(val OptDateTime) {
	s.PaymentAt = val
}

// Способ оплаты
// - UNDEFINED: не определенный
// - CASH: оплата наличными
// - CARD: оплата картой
// - SBP: оплата через СБП.
// Ref: #/components/schemas/payment_method
type PaymentMethod string

const (
	PaymentMethodUNDEFINED PaymentMethod = "UNDEFINED"
	PaymentMethodCASH      PaymentMethod = "CASH"
	PaymentMethodCARD      PaymentMethod = "CARD"
	PaymentMethodSBP       PaymentMethod = "SBP"
)

// AllValues returns all PaymentMethod values.
func (PaymentMethod) AllValues() []PaymentMethod {
	return []PaymentMethod{
		PaymentMethodUNDEFINED,
		PaymentMethodCASH,
		PaymentMethodCARD,
		PaymentMethodSBP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodUNDEFINED:
		return []byte(s), nil
	case PaymentMethodCASH:
		return []byte(s), nil
	case PaymentMethodCARD:
		return []byte(s), nil
	case PaymentMethodSBP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethod) UnmarshalText(data []byte) error {
	switch PaymentMethod(data) {
	case PaymentMethodUNDEFINED:
		*s = PaymentMethodUNDEFINED
		return nil
	case PaymentMethodCASH:
		*s = PaymentMethodCASH
		return nil
	case PaymentMethodCARD:
		*s = PaymentMethodCARD
		return nil
	case PaymentMethodSBP:
		*s = PaymentMethodSBP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/payment_order_request
type PaymentOrderRequest struct {
	PaymentMethod PaymentMethod `json:"payment_method"`
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *PaymentOrderRequest) GetPaymentMethod() PaymentMethod {
	return s.PaymentMethod
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *PaymentOrderRequest) SetPaymentMethod(val PaymentMethod) {
	s.PaymentMethod = val
}

// Ref: #/components/schemas/payment_order_response
type PaymentOrderResponse struct {
	// Уникальный идентификатор транзакции.
	TransactionUUID uuid.UUID `json:"transaction_uuid"`
	// Время последнего обновления.
	CreatedAt time.Time `json:"created_at"`
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *PaymentOrderResponse) GetTransactionUUID() uuid.UUID {
	return s.TransactionUUID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PaymentOrderResponse) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *PaymentOrderResponse) SetTransactionUUID(val uuid.UUID) {
	s.TransactionUUID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PaymentOrderResponse) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

func (*PaymentOrderResponse) payOrderRes() {}

// Статус платежа
// - EXPECT_PAYMENT: ожидает оплаты
// - PAID: оплачено
// - IN_PROGRESS: в процессе
// - COMPLETED: выполнен
// - CANCELLED: Отменён.
// Ref: #/components/schemas/status
type Status string

const (
	StatusEXPECTPAYMENT Status = "EXPECT_PAYMENT"
	StatusPAID          Status = "PAID"
	StatusINPROGRESS    Status = "IN_PROGRESS"
	StatusCOMPLETED     Status = "COMPLETED"
	StatusCANCELLED     Status = "CANCELLED"
)

// AllValues returns all Status values.
func (Status) AllValues() []Status {
	return []Status{
		StatusEXPECTPAYMENT,
		StatusPAID,
		StatusINPROGRESS,
		StatusCOMPLETED,
		StatusCANCELLED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Status) MarshalText() ([]byte, error) {
	switch s {
	case StatusEXPECTPAYMENT:
		return []byte(s), nil
	case StatusPAID:
		return []byte(s), nil
	case StatusINPROGRESS:
		return []byte(s), nil
	case StatusCOMPLETED:
		return []byte(s), nil
	case StatusCANCELLED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Status) UnmarshalText(data []byte) error {
	switch Status(data) {
	case StatusEXPECTPAYMENT:
		*s = StatusEXPECTPAYMENT
		return nil
	case StatusPAID:
		*s = StatusPAID
		return nil
	case StatusINPROGRESS:
		*s = StatusINPROGRESS
		return nil
	case StatusCOMPLETED:
		*s = StatusCOMPLETED
		return nil
	case StatusCANCELLED:
		*s = StatusCANCELLED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/unexpected_error
type UnexpectedError struct {
	// HTTP code error.
	Code int `json:"code"`
	// Message error.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *UnexpectedError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *UnexpectedError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *UnexpectedError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *UnexpectedError) SetMessage(val string) {
	s.Message = val
}

// UnexpectedErrorStatusCode wraps UnexpectedError with StatusCode.
type UnexpectedErrorStatusCode struct {
	StatusCode int
	Response   UnexpectedError
}

// GetStatusCode returns the value of StatusCode.
func (s *UnexpectedErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *UnexpectedErrorStatusCode) GetResponse() UnexpectedError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *UnexpectedErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *UnexpectedErrorStatusCode) SetResponse(val UnexpectedError) {
	s.Response = val
}
